Description: >
  VPC dengan public dan private subnet dikedua availability zone, beserta komponen internet gateway, route table, dan security group.

#----------------------------------------------------------------------------------------#
Parameters:
# User memasukkan nama VPC yang digunakan didalam tag.
  VPCName:
    Type: String
    Default: MyVPC
    Description: Enter the name for this VPC.

# User memasukkan IP range yang digunakan VPC.
  VPCCIDR:
    Type: String
    Default: 192.168.0.0/16
    Description: Enter the IP range for this VPC.

# User memasukkan beberapa IP range yang digunakan subnet-subnet didalam VPC.
  PublicSubnet1CIDR:
    Type: String
    Default: 192.168.0.0/24
    Description: Enter the IP range for the public subnet 1 in the first Availability Zone.

  PrivateSubnet1CIDR:
    Type: String
    Default: 192.168.1.0/24
    Description: Enter the IP range for the private subnet 1 in the first Availability Zone.

  PublicSubnet2CIDR:
    Type: String
    Default: 192.168.2.0/24
    Description: Enter the IP range for the public subnet 2 in the second Availability Zone.

  PrivateSubnet2CIDR:
    Type: String
    Default: 192.168.3.0/24
    Description: Enter the IP range for the private subnet 2 in the second Availability Zone.

#----------------------------------------------------------------------------------------#
Resources:
# Buat VPC dengan CIDR block yang user masukkan sebelumnya. Properti EnableDnsHostnames memungkinkan VPC menerapkan public DNS hostnames ke EC2 instance. Sedangkan properti EnableDnsSupport memungkinkan resource didalam VPC melakukan DNS resolution menggunakan Amazon DNS server (semisal lokal DNS server tapi didalam VPC).
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub: Lab - ${VPCName} 

# Mengatur agar VPC mendapatkan IPv6.
  VpcCidrBlockIpv6:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId:
        Ref: VPC
      AmazonProvidedIpv6CidrBlock: true

# Buat internet gateway untuk koneksi internet.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Sub: Lab - ${VPCName} FastInternet

# Pasang internet gateway ke VPC.
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC

# Buat public subnet untuk VPC dengan CIDR block yang user masukkan sebelumnya.
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select: [0, Fn::GetAZs: ""]
      CidrBlock:
        Ref: PublicSubnet1CIDR
# Memungkinkan instance didalam subnet mendapatkan public IP address.
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub: Lab - ${VPCName} PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select: [1, Fn::GetAZs: ""]
      CidrBlock:
        Ref: PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:
            Fn::Sub: Lab - ${VPCName} PublicSubnet2

# Buat private subnet untuk VPC dengan CIDR block yang user masukkan sebelumnya.
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select: [0, Fn::GetAZs: ""]
      CidrBlock:
        Ref: PrivateSubnet1CIDR
# Tidak memberikan public IP address untuk instance didalam subnet.
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            Fn::Sub: Lab - ${VPCName} PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      AvailabilityZone:
        Fn::Select: [1, Fn::GetAZs: ""]
      CidrBlock:
        Ref: PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:
            Fn::Sub: Lab - ${VPCName} PrivateSubnet2

# Buat route table didalam VPC.
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value:
            Fn::Sub: Lab - ${VPCName} PublicRoutes

# Buat route didalam route table yang mengarahkan traffic ke internet gateway.
  RouteEntry:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway

# Pasang route table ke public subnet yang kita buat sebelumnya.
  RouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet1

  RouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      SubnetId:
        Ref: PublicSubnet2

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow all IP address to port SSH, RDP, ICMP and HTTP
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 3389
        ToPort: 3389
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value:
          Fn::Sub: Lab - ${VPCName} SecurityGroup

#----------------------------------------------------------------------------------------#
Outputs:
  VPCID:
    Value:
      Ref: VPC
    Description: VPC ID

  SecurityGroupID:
    Value:
      Ref: SecurityGroup
    Description: SecurityGroup ID

  PublicSubnetsCIDR:
# Gabung 2 public subnet ID menjadi satu output dengan notasi koma "," sebagai penyambung.
    Value:
      Fn::Join: [ ",", [ Ref: PublicSubnet1, Ref: PublicSubnet2 ]]
    Description: List of the PublicSubnets CIDR

  PrivateSubnetsCIDR:
# Gabung 2 private subnet ID menjadi satu output dengan notasi koma "," sebagai penyambung.
    Value:
      Fn::Join: [ ",", [ Ref: PrivateSubnet1, Ref: PrivateSubnet2 ]]
    Description: List of the PrivateSubnets CIDR
