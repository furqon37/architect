description: |-
  ## SSMAutomation-InstallSoftware
  This document is created to automate installing the website to your EC2 instance. Feel free to use this document and change the Approvers with your User ARN and NotificationArn with your SNS ARN.
  *Worked with Linux AMI and HTTP website*
schemaVersion: '0.3'
parameters:
  InstanceId:
    type: String
    description: 'Select the EC2 Instance you want to install:'
  ApplicationUrl:
    type: String
    description: 'Insert the URL where the software (package.zip) is located:'
mainSteps:
  - name: CreateAMI
    action: 'aws:createImage'
    inputs:
      InstanceId: '{{InstanceId}}'
      ImageName: 'SSMAuto-{{InstanceId}}_{{automation:EXECUTION_ID}}'
      NoReboot: true
      ImageDescription: Temporary Image for SSM Automation
    outputs:
      - Name: CreatedImageId
        Selector: ImageId
        Type: String
    description: Create AMI for selected Instance ID
  - name: VerifyAMI
    action: 'aws:waitForAwsResourceProperty'
    inputs:
      Service: ec2
      Api: DescribeImages
      PropertySelector: 'Images[0].State'
      DesiredValues:
        - available
      ImageIds:
        - '{{CreateAMI.CreatedImageId}}'
    description: Verify if created AMI is finished
    timeoutSeconds: 30
    isCritical: false
  - name: CreateTemporaryEC2
    action: 'aws:createStack'
    inputs:
      TemplateBody: "Resources:\r\n  TemporaryEC2:\r\n    Type: AWS::EC2::Instance\r\n    Properties:\r\n      ImageId: {{CreateAMI.CreatedImageId}}\r\n      InstanceType: t3.micro\r\n      SecurityGroups:\r\n        - !Ref TemporarySecurityGroup\r\n      IamInstanceProfile: !Ref EC2ProfileforSSM\r\n      UserData:\r\n        Fn::Base64: |\r\n          #!/bin/bash\r\n          yum update -y\r\n          cd /var/www/html\r\n          wget {{ApplicationUrl}}\r\n          unzip package.zip\r\n          rm -f package.zip\r\n      Tags: \r\n      - Key: \"Name\"\r\n        Value: \"SSMAuto-TemporaryEC2\"\r\n\r\n  TemporaryEIP:\r\n    Type: AWS::EC2::EIP\r\n    Properties:\r\n      InstanceId:\r\n        !Ref TemporaryEC2\r\n      Tags: \r\n      - Key: \"Name\"\r\n        Value: \"SSMAuto-TemporaryEIP\"\r\n\r\n  TemporarySecurityGroup:\r\n    Type: AWS::EC2::SecurityGroup\r\n    Properties:\r\n      GroupDescription: Allow all IP address to HTTP access\r\n      SecurityGroupIngress:\r\n      - IpProtocol: tcp\r\n        FromPort: 80\r\n        ToPort: 80\r\n        CidrIp: 0.0.0.0/0\r\n      Tags: \r\n      - Key: \"Name\"\r\n        Value: \"SSMAuto-TemporarySecurityGroup\"\r\n\r\n  EC2RoleforSSM:\r\n    Type: AWS::IAM::Role\r\n    Properties: \r\n      AssumeRolePolicyDocument: \r\n        Statement: \r\n          - Effect: Allow\r\n            Principal: \r\n              Service:\r\n                - ec2.amazonaws.com\r\n            Action: \r\n              - sts:AssumeRole\r\n      ManagedPolicyArns: \r\n        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM\r\n      Path: \"/\"\r\n      Tags: \r\n      - Key: \"Name\"\r\n        Value: \"SSMAuto-EC2RoleforSSM\"\r\n  EC2ProfileforSSM:\r\n    Type: AWS::IAM::InstanceProfile\r\n    Properties: \r\n      Path: \"/\"\r\n      Roles: \r\n        - !Ref EC2RoleforSSM\r\n\r\nOutputs:\r\n  EC2PublicDNS:\r\n    Description: Public DNS Endpoint of EC2\r\n    Value: !GetAtt TemporaryEC2.PublicDnsName"
      StackName: 'SSMAuto-TemporaryEC2Stack-{{automation:EXECUTION_ID}}'
      Capabilities:
        - CAPABILITY_IAM
    description: Create the temporary EC2 stack using CloudFormation
  - name: Approval
    action: 'aws:approve'
    inputs:
      Approvers:
        - 'arn:aws:iam::890913392175:user/furqonm'
        - 'arn:aws:iam::890913392175:root'
      NotificationArn: 'arn:aws:sns:us-east-1:890913392175:ReceiveMail'
      Message: Need for approval before install the software to production
  - name: TerminateTemporaryEC2
    action: 'aws:deleteStack'
    inputs:
      StackName: 'SSMAuto-TemporaryEC2Stack-{{automation:EXECUTION_ID}}'
    description: Terminate the temporary EC2 stack in CloudFormation
  - name: DeleteAMI
    action: 'aws:deleteImage'
    inputs:
      ImageId: '{{CreateAMI.CreatedImageId}}'
    description: Deregister AMI created for Temporary EC2 stack
  - name: InstalltoProductionEC2
    action: 'aws:runCommand'
    inputs:
      DocumentName: AWS-RunShellScript
      InstanceIds:
        - '{{InstanceId}}'
      Parameters:
        commands:
          - yum update -y
          - 'wget {{ ApplicationUrl }}'
          - unzip package.zip
          - rm -f package.zip
        executionTimeout: '3600'
        workingDirectory: /var/www/html
      Comment: Execute command to install
    description: Install the software to production EC2
